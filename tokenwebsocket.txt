Token Backend API & WebSocket Documentation
 Overview
 On token page loads you will first send an API request to the backend to grab current and historical data
 and OHLCV for the token for initial page load (for displaying chart data, trades, price/market cap). Then
 subscribe to a WebSocket room to listen for incoming trades and every minute a new chart update
 containing latest candle and OHLCV data. When a user leaves the page (exits out, or switches to a new page
 inside website) you will then unsubscribe (updates will continue until all users have unsubscribed). You can
 cache API-fetched historical data for 30 seconds in case a user spams reloads.
 1. WebSocket Connection
 Connect to WebSocket
 import { io } from 'socket.io-client';
 const socket = io('YOUR_BACKEND_URL');
 Subscribe to a token
 const tokenAddress = '0xabc123...';
 socket.emit('subscribe', tokenAddress.toLowerCase());
 Unsubscribe from a token
 socket.emit('unsubscribe', tokenAddress.toLowerCase());
 Events
 • 
trade: emitted when a new trade occurs for a subscribed token.
 socket.on('trade', (trade) => {
 console.log('New trade:', trade); // Add code to display trades to user
 });
 Example New Trade:
 1
{
 "type": "BUY",
 "token": "0xDaA79999982e3EeE55930e642717AB7c195FFF82",
 "name": "TESTSPAM0",
 "symbol": "TSTSPM0",
 "total_supply": 69000000,
 "trader": "0xf178e5eE763027A5330F93CEe508A145EceDDC62",
 "amountEth": 0.01,
 "amountTokens": 570433.1034550255,
 "price": 0.00007223,
 "usdValue": 47.7043,
 "marketCap": 4983.81133381025,
 "txHash":
 "0xacb1b1afa2af11dc415b98c03ac57b0a6411d0af07f348aa41e739e5b3ef4773",
 "virtualEth": 0.04472999998118628,
 "circulatingSupply": 2954227.406849074,
 "timestamp": 1755915109245
 }
 {
 "type": "SELL",
 "token": "0xDaA79999982e3EeE55930e642717AB7c195FFF82",
 "name": "TESTSPAM0",
 "symbol": "TSTSPM0",
 "total_supply": 69000000,
 "trader": "0xf178e5eE763027A5330F93CEe508A145EceDDC62",
 "amountEth": 1.7122743e-11,
 "amountTokens": 0.00121,
 "price": 0.00007223,
 "usdValue": 8.168284688949001e-8,
 "marketCap": 4983.811333718944,
 "txHash":
 "0x5d977b8696a9b0bb333e1189126422262d19c8a765671c898a5edf6a98227a6d",
 "virtualEth": 0.04472999996204617,
 "circulatingSupply": 2954227.4056390743,
 "timestamp": 1755915120772
 }
 • 
chartUpdate: emitted when a new candle is updated.
 socket.on('chartUpdate', ({ timeframe, candle }) => {
 console.log('Chart update:', candle); // Add code to update chart
 });
 Example Chart Update:
 2
{
 }
 "timeframe": "1",
 "candle": {
 "token": "0xdaa79999982e3eee55930e642717ab7c195fff82",
 "timestamp": 1755915240000,
 "open": "0.00007272",
 "high": 0.00007272,
 "low": 0.00007272,
 "close": "0.00007272",
 "volume": 0.010000000017417241
 }
 Important Notes
 • 
• 
• 
• 
Always subscribe when a new user opens page, AND unsubscribe when a user leaves the token page
 (e.g., navigating back or closing the token view).
 Page reloads or switching browser tabs do not require unsubscription.
 Leaving without unsubscribing may cause unnecessary backend load.
 Chart updates will only be sent every 1 minute with new 1-minute candles. For different timeframes,
 aggregate this per user needs from the 1m candles.
 2. REST API Endpoints
 2.1 Full Token Data
 GET
 /api/token/:address/full
 Query Parameters:
 • 
• 
interval (optional): one of 
1m , 
5m , 
15m , 
1h , 
12h , 
24h . Default: 
1m
 limit (optional): max number of historical candles to fetch. Default: 50, Max: 200
 Example Request:
 fetch(`${BACKEND_URL}/api/token/${tokenAddress}/full?interval=1m&limit=100`)
 .then(res => res.json())
 .then(data => {
 console.log('Token full data:', data);
 });
 Response:
 3
{
 }
 "token": "0xdaa79999982e3eee55930e642717ab7c195fff82",
 "timeframe": "1m",
 "lastPrice": 0.00007272,
 "marketCap": 5017.594574966552,
 "trades": [
 ... ],
 "candles": [
 ... ]
 Import Notes:
 • 
• 
This will be used on page loads to fetch passed trades, token details and chart data for initial display
 for user, can cache data for up to 30 seconds-1 minute to prevent users spam loading.
 Full response can be found in 
2.2 Chart-Specific Data
 fullTokenDataResponse.json
 GET
 /api/token/:address/chart
 Query Parameters:
 • 
• 
timeframe (optional): one of 
1m , 
5m , 
15m , 
1h , 
12h , 
24h . Default: 
1m
 limit (optional): max number of historical candles to fetch. Default: 50, Max: 200
 Example Request:
 fetch(`${BACKEND_URL}/api/token/${tokenAddress}/chart?timeframe=1m&limit=100`)
 .then(res => res.json())
 .then(data => {
 console.log('Token chart data:', data);
 });
 Response:
 {
 }
 "token": "0xabc123...",
 "timeframe": "1m",
 "lastPrice": 0.00007272,
 "marketCap": 5017.594574966552,
 "trades": [
 ... ],
 "candles": [
 ... ]
 4
3. Example Integration
 Here is a quick example of how I was testing it using a React app.
 import React, { useEffect, useState } from "react";
 import { io } from "socket.io-client";
 import { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid } from
 "recharts";
 const BACKEND_URL = "https://backendurl"; // replace with your backend URL if 
different
 export default function TokenPage() {
 const [candles, setCandles] = useState([]);
 const [trades, setTrades] = useState([]);
 const [socket, setSocket] = useState(null);
 const [selectedToken, setSelectedToken] = useState(null);
 const [searchInput, setSearchInput] = useState("");
 // Load history when token changes
 useEffect(() => {
 if (!selectedToken) return;
 fetch(`${BACKEND_URL}/api/token/${selectedToken}/chart?
 timeframe=1m&limit=100`)
 .then((res) => {
 if (!res.ok) throw new Error(`HTTP error ${res.status}`);
 return res.json();
 })
 .then((data) => {
 console.log("Fetched history:", data);
 setCandles(data.candles || []);
 setTrades(data.trades || []);
 })
 .catch((err) => console.error("Failed to fetch chart history:", err));
 }, [selectedToken]);
 // WebSocket subscription
 useEffect(() => {
 if (!selectedToken) return;
 const s = io(BACKEND_URL);
 setSocket(s);
 s.emit("subscribe", selectedToken.toLowerCase());
 5
s.on("trade", (trade) => {
 console.log("New trade:", trade);
 setTrades((prev) => [trade, ...prev].slice(0, 50));
 });
 s.on("chartUpdate", ({ timeframe, candle }) => {
 console.log("Chart update:", candle);
 setCandles((prev) => {
 const idx = prev.findIndex((c) => c.timestamp === candle.timestamp);
 if (idx >= 0) {
 const updated = [...prev];
 updated[idx] = candle;
 return updated;
 }
 return [...prev, candle];
 });
 });
 return () => {
 s.emit("unsubscribe", selectedToken);
 s.disconnect();
 };
 }, [selectedToken]);
 const handleSearch = (e) => {
 e.preventDefault();
 if (searchInput.trim()) {
 setSelectedToken(searchInput.trim());
 setCandles([]);
 setTrades([]);
 }
 };
 const handleBack = () => {
 if (socket && selectedToken) {
 socket.emit("unsubscribe", selectedToken);
 socket.disconnect();
 }
 setSelectedToken(null);
 setCandles([]);
 setTrades([]);
 setSocket(null);
 };
 return (
 <div className="p-4">
 {!selectedToken ? (
 // Search form
 6
<form onSubmit={handleSearch} className="flex gap-2">
 <input
 type="text"
 placeholder="Enter token address"
 value={searchInput}
 onChange={(e) => setSearchInput(e.target.value)}
 className="border p-2 rounded w-96"
 />
 <button type="submit" className="bg-blue-500 text-white px-4 rounded">
 Load
 </button>
 </form>
 ) : (
 <>
 <div className="flex justify-between items-center">
 <h1 className="text-xl font-bold">Token: {selectedToken}</h1>
 <button
 onClick={handleBack}
 className="bg-gray-500 text-white px-3 py-1 rounded"
 >
 Back
 </button>
 </div>
 {/* Chart */}
 <div className="my-4">
 <LineChart width={600} height={300} data={candles}>
 <XAxis
 dataKey="timestamp"
 tickFormatter={(t) => new Date(t).toLocaleTimeString()}
 />
 <YAxis />
 <Tooltip />
 <CartesianGrid stroke="#ccc" />
 <Line type="monotone" dataKey="close" stroke="#8884d8"
 dot={false} />
 </LineChart>
 </div>
 {/* Trades */}
 <div>
 <h2 className="font-semibold">Recent Trades</h2>
 <ul className="mt-2 max-h-64 overflow-y-auto">
 {trades.map((t, idx) => (
 <li key={idx} className="border-b py-1 text-sm">
 [{t.type}] {t.amountEth} ETH @ {t.price}
 </li>
 ))}
 7
</ul>
 </div>
 </>
 )}
 </div>
 );
 }
 Full code example of integration can be found in 
fullTokenPageExample.js
 